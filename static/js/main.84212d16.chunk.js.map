{"version":3,"sources":["logic/Signal.js","logic/Minesweeper.js","components/Cell.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Signal","this","receivers","current","forEach","receiver","apply","arguments","push","remove","getSurrounding","index","width","height","pos","Math","floor","neighbors","y","x","Minesweeper","mineCount","started","size","grid","shownGrid","signals","gridUpdate","i","ignore","mineRandom","Set","Array","length","keys","value","delete","position","random","splice","j","add","startGame","revealConnectingBlanks","dispatch","toSearch","searchSet","hasSearch","cell","pop","has","colorMap","1","2","3","4","5","6","7","8","9","Cell","props","classes","children","Tile","className","root","onClick","Component","styled","div","withStyles","theme","display","justifyContent","alignItems","border","minWidth","minHeight","Game","minesweeper","setState","state","cellList","clickCell","revealTile","Board","marginLeft","marginRight","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84212d16.chunk.js","sourcesContent":["export class Signal {\r\n    \r\n    constructor() {\r\n        this.receivers = []\r\n    }\r\n    \r\n    dispatch() {\r\n        const current = [...this.receivers]\r\n        current.forEach((receiver) => {\r\n            receiver.apply(null, arguments)\r\n        })\r\n    }\r\n    \r\n    add(receiver) {\r\n        this.receivers.push(receiver)\r\n    }\r\n    \r\n    remove(receiver) {\r\n        this.receivers.remove(receiver)\r\n    }\r\n    \r\n    removeAll() {\r\n        this.receivers = []\r\n    }\r\n    \r\n}\r\n","import {Signal} from \"./Signal\";\r\n\r\nclass Minesweeper {\r\n    \r\n    constructor(width, height, mineCount) {\r\n        this.started = false\r\n        this.size = {x: width, y: height}\r\n        this.grid = []\r\n        this.shownGrid = []\r\n        this.mineCount = mineCount\r\n        \r\n        this.signals = {\r\n            gridUpdate: (new Signal()),\r\n        }\r\n        \r\n        for (let i = 0; i < width*height; i++) {\r\n            this.grid.push(0)\r\n            this.shownGrid.push(\"\")\r\n        }\r\n        \r\n    }\r\n    \r\n    startGame(ignore = []) {\r\n    \r\n        let mineRandom = new Set(Array(this.grid.length).keys())\r\n        ignore.forEach(value => {\r\n            mineRandom.delete(value)\r\n        })\r\n        \r\n        mineRandom = Array(...mineRandom)\r\n        for (let i = 0; i < this.mineCount; i++) {\r\n            let position = Math.floor(Math.random() * mineRandom.length)\r\n        \r\n            let index = mineRandom[position]\r\n            this.grid[index] = 9\r\n            getSurrounding(index, this.size.x, this.size.y).forEach(value => {\r\n                if (this.grid[value] !== 9) {\r\n                    this.grid[value] += 1\r\n                }\r\n            })\r\n        \r\n            mineRandom.splice(position, 1)\r\n        }\r\n        \r\n        this.started = true\r\n        \r\n    }\r\n    \r\n    revealTile(index) {\r\n        if (this.shownGrid[index] !== \"\") {\r\n            return\r\n        }\r\n        \r\n        if (!this.started) {\r\n            let ignore = new Set()\r\n            getSurrounding(index, this.size.x, this.size.y).forEach(i =>\r\n                    getSurrounding(i, this.size.x, this.size.y).forEach(j => ignore.add(j))\r\n            )\r\n            this.startGame(Array(...ignore))\r\n        }\r\n        \r\n        this.shownGrid[index] = this.grid[index]\r\n        if (this.grid[index] === 0) {\r\n            this.revealConnectingBlanks(index)\r\n        }\r\n        \r\n        this.signals.gridUpdate.dispatch(this.shownGrid)\r\n        \r\n    }\r\n    \r\n    revealConnectingBlanks(index) {\r\n        let toSearch = [index]\r\n        let searchSet = new Set(toSearch)\r\n        let hasSearch = new Set()\r\n        \r\n        while (toSearch.length) {\r\n            let cell = toSearch.pop()\r\n            searchSet.delete(cell)\r\n            hasSearch.add(cell)\r\n            getSurrounding(cell, this.size.x, this.size.y).forEach(value => {\r\n                if (this.grid[value] === 0 && !hasSearch.has(value) && !searchSet.has(value)) {\r\n                    toSearch.push(value)\r\n                    searchSet.add(value)\r\n                }\r\n                this.shownGrid[value] = this.grid[value]\r\n            })\r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n\r\nfunction getSurrounding(index, width, height) {\r\n    let pos = [index%width, Math.floor(index/width)]\r\n    let neighbors = []\r\n    for (let y = -1; y < 2; y++) {\r\n        for (let x = -1; x < 2; x++) {\r\n            if ((x !== 0 || y !== 0) && 0 <= pos[0]+x && pos[0]+x < width && 0 <= pos[1]+y && pos[1]+y < height) {\r\n                neighbors.push(((y+pos[1])*width)+(x+pos[0]))\r\n            }\r\n        }\r\n    }\r\n    return neighbors\r\n}\r\n\r\nexport default Minesweeper\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nconst colorMap = {\r\n    1: \"#4a0094\",\r\n    2: \"#0000a3\",\r\n    3: \"#009999\",\r\n    4: \"#52a300\",\r\n    5: \"#c4b000\",\r\n    6: \"#b55b00\",\r\n    7: \"#9e0000\",\r\n    8: \"#4d4d4d\",\r\n    9: \"#ffffff\",\r\n}\r\n\r\nclass Cell extends Component {\r\n    render() {\r\n        const {classes, children} = this.props\r\n        \r\n        return (\r\n            <Tile className={classes.root} onClick={() => this.props.onClick(this.props.index)}>\r\n                {(children !== 0) && children}\r\n            </Tile>\r\n        );\r\n    }\r\n}\r\n\r\nconst Tile = styled.div`\r\n  background-color: ${props => (props.children === \"\") ? \"#999999\" : (props.children === 9) ? \"#4d4d4d\" : \"#e6e6e6\"};\r\n  color: ${props => colorMap[props.children]};\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  &:before {\r\n    content: \"\";\r\n    display: block;\r\n    height: 0;\r\n    width: 0;\r\n    padding-bottom: 100%;\r\n  }\r\n`\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        border: \"1px solid black\",\r\n        minWidth: 20,\r\n        minHeight: 20,\r\n    },\r\n});\r\n\r\nexport default withStyles(styles)(Cell);\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport styled from 'styled-components'\r\nimport Minesweeper from \"../logic/Minesweeper\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst width = 16;\r\nconst height = 16;\r\n\r\nclass Game extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.minesweeper = new Minesweeper(width, height, 40)\r\n        this.minesweeper.signals.gridUpdate.add(grid => {\r\n            this.setState({grid: grid})\r\n        })\r\n        \r\n        this.state = {\r\n            grid: this.minesweeper.shownGrid,\r\n        }\r\n        \r\n    }\r\n    \r\n    render() {\r\n        const {classes} = this.props\r\n        const cellList = []\r\n        \r\n        const clickCell = (index) => {\r\n            this.minesweeper.revealTile(index)\r\n        }\r\n        \r\n        let i = 0\r\n        this.state.grid.forEach((value) => {\r\n            cellList.push(<Cell key={i} index={i} onClick={clickCell}>{value}</Cell>)\r\n            i++\r\n        })\r\n        return (\r\n            <Board className={classes.root}>\r\n                {cellList}\r\n            </Board>\r\n        );\r\n    }\r\n}\r\n\r\nconst Board = styled.div`\r\n  max-width: ${48*width}px;\r\n  display: grid;\r\n  grid-template-columns: repeat(${width}, 1fr);\r\n  grid-template-rows: repeat(${height}, 1fr);\r\n`;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        padding: \"1rem\",\r\n    },\r\n});\r\n\r\nexport default withStyles(styles)(Game);\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from \"@material-ui/core\";\r\nimport Game from \"./components/Game\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        const {classes} = this.props\r\n        \r\n        return (\r\n            <div>\r\n              <Game/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = (theme) => ({\r\n    root: {},\r\n});\r\n\r\nexport default withStyles(styles)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}